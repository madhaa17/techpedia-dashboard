generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(CUSTOMER)
  addresses Address[]
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ProductReview ProductReview[]

  CartItem CartItem[]
}

model InvalidToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token])
  @@index([expiresAt])
}

model Address {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  recipientName String
  phoneNumber   String
  addressLine   String
  city          String
  postalCode    String
  isDefault     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String
  price       Float
  stock       Int
  imageUrl    String
  brand       Brand    @relation(fields: [brandId], references: [id])
  brandId     String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  reviews     ProductReview[]
  orderItems  OrderItem[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  CartItem CartItem[]
}

model Brand {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ProductReview {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model CartItem {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
}

model Order {
  id            String       @id @default(uuid())
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  totalAmount   Float      
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String
  items         OrderItem[]
  createdAt     DateTime     @default(now())

  SalesReport SalesReport[]
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  price     Float  
  quantity  Int
}

model SalesReport {
  id      String @id @default(uuid())
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String
}

enum Role {
  ADMIN
  CUSTOMER
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}
